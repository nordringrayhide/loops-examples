class MembloatLoop < Loops::Base
  config_option :max_mem_mb, type: Integer, default: 600

  def run
    with_period_of(5) do
      data = [
        123201335,123201336,123201337,123201338,123201339,124201335,124201336,124201337,124201338,124201339,
        125201335,125201336,125201337,125201338,125201339,127201335,127201336,127201337,127201338,127201339,
        128201335,128201336,128201337,128201338,128201339,130201335,130201336,130201337,130201338,130201339,
        131201335,131201336,131201337,131201338,131201339,332201335,332201336,332201337,332201338,333201335,
        333201336,333201337,333201338,334201335,334201336,334201337,334201338,336201335,336201336,336201337,
        336201338,337201335,337201336,337201337,337201338,339201335,339201336,339201337,339201338,340201335,
        340201336,340201337,340201338,515201335,515201336,515201337,515201338,516201335,516201336,516201337,
        516201338,517201335,517201336,517201337,517201338,519201335,519201336,519201337,519201338,520201335,
        520201336,520201337,520201338,522201335,522201336,522201337,522201338,523201335,523201336,523201337,
        523201338,696201335,696201336,696201337,696201338,697201335,697201336,697201337,697201338,698201335,
        698201336,698201337,698201338,700201335,700201336,700201337,700201338,701201335,701201336,701201337,
        701201338,703201335,703201336,703201337,703201338,704201335,704201336,704201337,704201338,881201335,
        881201336,881201337,881201338,882201335,882201336,882201337,882201338,884201335,884201336,884201337,
        519201338,560201335,560201336,560201337,560201338,562201335,562201336,562201337,562201338,563201335,
        563201336,563201337,563201338,579201338,560201335,560201336,560201337,560201338,562201335,562201336
      ]

      GC.disable

      data.each_with_index do |row, i|
        row << row
        mem_mb = GetProcessMem.new(Process.pid).mb
        info "memory:#{mem_mb}"
        if mem_mb > max_mem_mb
          fatal "Memory Overflow. Restart."
          exit(0)
        end
      end
    end
  end
end
